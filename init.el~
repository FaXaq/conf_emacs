;;disable splash screen
(setq inhibit-startup-message t)

;;avoid Control-z from freezing UI
(global-unset-key (kbd "C-z"))

;;set undo on Control-z
(defalias 'redo 'undo-tree-redo) 
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-S-z") 'redo)

;;disable menu-bar & tool-bar
(tool-bar-mode -1)

;; scroll one line at a time (less "jumpy" than defaults)

(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time

(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling

(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

(setq scroll-step 1) ;; keyboard scroll one line at a time

(setq-default indent-tabs-mode nil) ;;indent no tab

(setq tab-width 4)
(setq nxml-child-indent 3)

;;;;;;;;;;;;;;
;; Ido mode ;;
;;;;;;;;;;;;;;

(require 'ido)
(require 'ido-vertical-mode)
(require 'ido-ubiquitous)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(ido-vertical-mode 1)
(ido-ubiquitous-mode 1)

;;;;;;;;;;;;;;;
;; Smex mode ;;
;;;;;;;;;;;;;;;

;; Ido for M-x
(require 'smex)
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)

(setq ag-highlight-search t) ;; ag-highlight

;;auto-complete
(setq ac-auto-start 3)

;; Selected text is owritten when tapping anything
(delete-selection-mode t)

;;Magit
(setq magit-auto-revert-mode nil)

;;80char max / line
(custom-set-faces
 '(my-tab-face            ((((class color)) (:background "grey10"))) t)
 '(my-trailing-space-face ((((class color)) (:background "gray10"))) t)
 '(my-long-line-face ((((class color)) (:background "gray10"))) t))
(add-hook 'font-lock-mode-hook
          (function
           (lambda ()
             (setq font-lock-keywords
                   (append font-lock-keywords
                           '(("\t+" (0 'my-tab-face t))
                             ("^.\\{81,\\}$" (0 'my-long-line-face t))
                             ("[ \t]+$"      (0 'my-trailing-space-face t))))))))

;;lisp
;;;; This file was created automatically by the Quicklisp library
;;;; "quicklisp-slime-helper" from the "quicklisp" dist.

(setq quicklisp-slime-helper-dist "quicklisp")

 (setq quicklisp-slime-helper-base
       (if load-file-name
           (file-name-directory load-file-name)
         (expand-file-name "~/quicklisp/")))
 (defun quicklisp-slime-helper-file-contents (file)
   (with-temp-buffer
     (insert-file-contents file)
     (buffer-string)))

 (defun quicklisp-slime-helper-slime-directory ()
   (let ((location-file (concat quicklisp-slime-helper-base
                                "dists/"
                               quicklisp-slime-helper-dist
                                "/installed/systems/swank.txt")))
     (when (file-exists-p location-file)
       (let ((relative (quicklisp-slime-helper-file-contents location-file)))
         (file-name-directory (concat quicklisp-slime-helper-base
                                      relative))))))

 (let* ((quicklisp-slime-directory (quicklisp-slime-helper-slime-directory)))
   (add-to-list 'load-path quicklisp-slime-directory)
   (require 'slime-autoloads)
   (setq slime-backend (expand-file-name "swank-loader.lisp"
                                         quicklisp-slime-directory))
   (setq slime-path quicklisp-slime-directory)
   (slime-setup '(slime-fancy)))

  ;; Replace "sbcl" with the path to your implementation
  (setq inferior-lisp-program "/usr/bin/clisp")
